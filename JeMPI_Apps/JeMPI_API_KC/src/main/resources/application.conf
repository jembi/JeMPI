akka {
  http {
    session {
      enabled = true
    }
    host-connection-pool {
      max-connections = 1024
      max-open-requests = 1024
    }
    server {
      idle-timeout = 60 s
      request-timeout = 60 s
      linger-timeout = 60 s
      parsing {
          max-to-strict-bytes = 128m
          max-to-strict-bytes = ${?JEMPI_FILE_IMPORT_MAX_SIZE_BYTE}
      }
    }
  }
  actor {
    default-dispatcher {
      fork-join-executor {
        parallelism-min = 8
        parallelism-max = 64
      }
    }
  }
}

akka-http-cors {

  # If enabled, allow generic requests (that are outside the scope of the specification)
  # to pass through the directive. Else, strict CORS filtering is applied and any
  # invalid request will be rejected.
  allow-generic-http-requests = yes

  # Indicates whether the resource supports user credentials.  If enabled, the header
  # `Access-Control-Allow-Credentials` is set in the response, indicating that the
  # actual request can include user credentials. Examples of user credentials are:
  # cookies, HTTP authentication or client-side certificates.
  allow-credentials = yes

  # List of origins that the CORS filter must allow. Can also be set to `*` to allow
  # access to the resource from any origin. Controls the content of the
  # `Access-Control-Allow-Origin` response header: if parameter is `*` and credentials
  # are not allowed, a `*` is set in `Access-Control-Allow-Origin`. Otherwise, the
  # origins given in the `Origin` request header are echoed.
  #
  # Hostname starting with `*.` will match any sub-domain.
  # The scheme and the port are always strictly matched.
  #
  # The actual or preflight request is rejected if any of the origins from the request
  # is not allowed.
  allowed-origins = "*"

  # List of request headers that can be used when making an actual request. Controls
  # the content of the `Access-Control-Allow-Headers` header in a preflight response:
  # if parameter is `*`, the headers from `Access-Control-Request-Headers` are echoed.
  # Otherwise the parameter list is returned as part of the header.
  allowed-headers = "*"

  # List of methods that can be used when making an actual request. The list is
  # returned as part of the `Access-Control-Allow-Methods` preflight response header.
  #
  # The preflight request will be rejected if the `Access-Control-Request-Method`
  # header's method is not part of the list.
  allowed-methods = ["GET", "POST", "PATCH", "HEAD", "OPTIONS"]

  # List of headers (other than simple response headers) that browsers are allowed to access.
  # If not empty, this list is returned as part of the `Access-Control-Expose-Headers`
  # header in the actual response.
  exposed-headers = ["Set-Authorization"]

  # When set, the amount of seconds the browser is allowed to cache the results of a preflight request.
  # This value is returned as part of the `Access-Control-Max-Age` preflight response header.
  # If `null`, the header is not added to the preflight response.
  max-age = 1800 seconds
}

# Note: For authentication with use the header session transport (com.softwaremill.session.javadsl.SessionTransports.HeaderST)
# The cookie setting here are mainly for csrf, which we are not yet full utilizing because of limitations of cross-domain cookie setting (which requires https)
# Might need to consider an alternative approach (outside akka.http.session) if we still want this feature, or consider removing it all together
# Keeping it here for posterity for now.
akka.http.session {
  server-secret = ${JEMPI_SESSION_SECRET}
  encrypt-data = true
  cookie {
    secure = true
    # This has to be None, as we access the api from another domain
    same-site = "None"
  }
  header {
      send-to-client-name = "Set-Authorization"
      get-from-client-name = "Authorization"
  }
  csrf {
    cookie {
      name = "XSRF-TOKEN"
      secure = true
      # This has to be None, as we access the api from another domain
      same-site = "None"
    }
    submitted-name = "X-XSRF-TOKEN"
  }
}

worker {
  max-post-records = 20
}

my-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1024
  }
  throughput = 1
}
