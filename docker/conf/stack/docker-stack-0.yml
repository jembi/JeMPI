version: '3.8'

networks:
  backend-kafka:
    name: backend-kafka
    driver: overlay
    attachable: true
  backend-dgraph:
    name: backend-dgraph
    driver: overlay
    attachable: true
  frontend-api:
    name: frontend-api
    driver: overlay
    attachable: true
  backend-postgresql:
    name: backend-postgresql
    driver: overlay
    attachable: true

services:

  kafka-01:
    image: ${IMAGE_REGISTRY}$KAFKA_IMAGE
    user: root
    networks:
      - backend-kafka
    environment:
      BITNAMI_DEBUG: 'true'
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: 'ehB92ChxEe2iYQAAAkKsEg'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-01:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-01:9093,2@kafka-02:9093,3@kafka-03:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT  
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - type: bind
        source: ${DATA_KAFKA_01_DIR}
        target: /bitnami/kafka
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == $PLACEMENT_KAFKA_01
  
  kafka-02:
    image: ${IMAGE_REGISTRY}$KAFKA_IMAGE 
    user: root
    networks:
      - backend-kafka
    environment:
      BITNAMI_DEBUG: 'true'
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: 'ehB92ChxEe2iYQAAAkKsEg'
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_BROKER_ID: 2
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-02:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-01:9093,2@kafka-02:9093,3@kafka-03:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT  
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - type: bind
        source: ${DATA_KAFKA_02_DIR}
        target: /bitnami/kafka
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == $PLACEMENT_KAFKA_02
  
  kafka-03:
    image: ${IMAGE_REGISTRY}$KAFKA_IMAGE 
    user: root
    networks:
      - backend-kafka
    environment:
      BITNAMI_DEBUG: 'true'
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: 'ehB92ChxEe2iYQAAAkKsEg'
      KAFKA_CFG_NODE_ID: 3
      KAFKA_CFG_BROKER_ID: 3
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-03:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-01:9093,2@kafka-02:9093,3@kafka-03:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT  
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - type: bind
        source: ${DATA_KAFKA_03_DIR}
        target: /bitnami/kafka
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == $PLACEMENT_KAFKA_03

  zero-01:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "zero-01"
    networks:
    - backend-dgraph
    ports:
    - published: 5080
      target: 5080
      protocol: tcp
      mode: host
    - published: 6080
      target: 6080
      protocol: tcp
      mode: host
    volumes:
    - type: bind
      source: ${DATA_DGRAPH_ZERO_01_DIR}
      target: /dgraph
    deploy:
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_DGRAPH_ZERO_01}
    command: dgraph zero --my=zero-01:5080 --replicas 1

  alpha-01:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "alpha-01"
    networks:
    - backend-dgraph
    volumes:
    - type: bind
      source: ${DATA_DGRAPH_ALPHA_01_DIR}
      target: /dgraph
    ports:
    - published: 8080
      target: 8080
      protocol: tcp
      mode: host
    - published: 9080
      target: 9080
      protocol: tcp
      mode: host
    deploy:
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_DGRAPH_ALPHA_01}
    command: dgraph alpha --my=alpha-01:7080 --zero=zero-01:5080 --security whitelist=0.0.0.0/0 --telemetry "sentry=false;"

  alpha-02:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "alpha-02"
    networks:
    - backend-dgraph
    volumes:
    - type: bind
      source: ${DATA_DGRAPH_ALPHA_02_DIR}
      target: /dgraph
    ports:
    - published: 8081
      target: 8081
      protocol: tcp
      mode: host
    - published: 9081
      target: 9081
      protocol: tcp
      mode: host
    deploy:
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_DGRAPH_ALPHA_02}
    command: dgraph alpha --my=alpha-02:7081 --zero=zero-01:5080 --security whitelist=0.0.0.0/0 -o 1 --telemetry "sentry=false;"

  alpha-03:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "alpha-03"
    networks:
    - backend-dgraph
    volumes:
    - type: bind
      source: ${DATA_DGRAPH_ALPHA_03_DIR}
      target: /dgraph
    ports:
    - published: 8082
      target: 8082
      protocol: tcp
      mode: host
    - published: 9082
      target: 9082
      protocol: tcp
      mode: host
    deploy:
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_DGRAPH_ALPHA_03}
    command: dgraph alpha --my=alpha-03:7082 --zero=zero-01:5080 --security whitelist=0.0.0.0/0 -o 2 --telemetry "sentry=false;"

  ratel:
    image: ${IMAGE_REGISTRY}${RATEL_IMAGE}
    ports:
    - published: 8010
      target: 8000
      protocol: tcp
      mode: host                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
    networks:
    - backend-dgraph
    deploy:
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_RATEL}
    command: dgraph-ratel

  postgresql:
    image: ${IMAGE_REGISTRY}${POSTGRESQL_IMAGE}
    environment:
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      ALLOW_EMPTY_PASSWORD: "yes"
    networks:
    - backend-postgresql
    ports:
    - published: 5432
      target: 5432
      protocol: tcp
      mode: host
    volumes:
    - type: bind
      source: ${DATA_POSTGRESQL_DIR}
      target: /conf
      read_only: true
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_POSTGRESQL}


  async-receiver:
    image: ${IMAGE_REGISTRY}${ASYNC_RECEIVER_IMAGE}
    networks:
    - backend-kafka
    volumes:
    - type: bind
      source: $DATA_DIR_ASYNC_RECEIVER/logs
      target: /app/logs
      read_only: false
    - type: bind
      source: $DATA_DIR_ASYNC_RECEIVER/csv
      target: /app/csv
      read_only: true
    - type: bind
      source: $DATA_DIR_ASYNC_RECEIVER/conf
      target: /app/conf
      read_only: true
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_ASYNC_RECEIVER}

  sync-receiver:
    image: ${IMAGE_REGISTRY}${SYNC_RECEIVER_IMAGE}
    networks:
    - backend-kafka
    ports:
    - published: 50040
      target: 50000
      protocol: tcp
      mode: host  
    volumes:
    - type: bind
      source: $DATA_DIR_SYNC_RECEIVER/logs
      target: /app/logs
      read_only: false
    - type: bind
      source: $DATA_DIR_SYNC_RECEIVER/conf
      target: /app/conf
      read_only: true
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_SYNC_RECEIVER}

  etl:
    image: ${IMAGE_REGISTRY}${ETL_IMAGE}
    networks:
    - backend-kafka
    volumes:
    - type: bind
      source: $DATA_DIR_ETL/conf
      target: /app/conf
      read_only: true
    - type: bind
      source: $DATA_DIR_ETL/logs
      target: /app/logs
      read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_ETL}

  controller:
    image: ${IMAGE_REGISTRY}${CONTROLLER_IMAGE}
    networks:
    - backend-kafka
    ports:
    - published: 50020
      target: 50000
      protocol: tcp
      mode: host      
    volumes:
    - type: bind
      source: $DATA_DIR_CONTROLLER/conf
      target: /app/conf
      read_only: true
    - type: bind
      source: $DATA_DIR_CONTROLLER/logs
      target: /app/logs
      read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_CONTROLLER}
       
  em:
    image: ${IMAGE_REGISTRY}${EM_IMAGE}
    networks:
    - backend-kafka
    volumes:
    - type: bind
      source: $DATA_DIR_EM/conf
      target: /app/conf
      read_only: true
    - type: bind
      source: $DATA_DIR_EM/logs
      target: /app/logs
      read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_EM}

  linker:
    image: ${IMAGE_REGISTRY}${LINKER_IMAGE}
    networks:
    - backend-kafka
    - backend-dgraph
    volumes:
    - type: bind
      source: $DATA_DIR_LINKER/conf
      target: /app/conf
      read_only: true
    - type: bind
      source: $DATA_DIR_LINKER/logs
      target: /app/logs
      read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_LINKER}

  api:
    image: ${IMAGE_REGISTRY}${API_IMAGE}
    environment:
      KC_REALM_NAME: ${KC_REALM_NAME}
      KC_API_URL: ${KC_API_URL}
      KC_JEMPI_CLIENT_ID: ${KC_JEMPI_CLIENT_ID}
      KC_JEMPI_CLIENT_SECRET: ${KC_JEMPI_CLIENT_SECRET}
      KC_JEMPI_ROOT_URL: ${KC_JEMPI_ROOT_URL}
      JEMPI_SESSION_SECRET: ${JEMPI_SESSION_SECRET}
      JEMPI_FILE_IMPORT_MAX_SIZE_BYTE: ${JEMPI_FILE_IMPORT_MAX_SIZE_BYTE}
    networks:
    - backend-dgraph
    - backend-kafka
    - frontend-api
    - backend-postgresql
    ports:
    - published: 50000
      target: 50000
      protocol: tcp
      mode: host  
    volumes:
    - type: bind
      source: $DATA_DIR_API/conf
      target: /app/conf
      read_only: true
    - type: bind
      source: $DATA_DIR_API/logs
      target: /app/logs
      read_only: false
    - type: bind
      source: $DATA_DIR_ASYNC_RECEIVER/csv
      target: /app/csv
      read_only: false
    deploy:
      mode: replicated
      replicas: 0
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_API}
    