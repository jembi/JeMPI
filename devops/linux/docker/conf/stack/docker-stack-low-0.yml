version: "3.8"

networks:
  backend:
    name: backend
    driver: overlay
    attachable: true
  frontend:
    name: frontend
    driver: overlay
    attachable: true

services:
  postgresql:
    image: ${IMAGE_REGISTRY}${POSTGRESQL_IMAGE}
    networks:
      - backend
    ports:
      - published: 5432
        target: 5432
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ${DATA_POSTGRESQL_DIR}
        target: /conf
        read_only: true
      - type: bind
        source: ${DATA_POSTGRESQL_DB_DIR}
        target: /bitnami/postgresql
    environment:
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      ALLOW_EMPTY_PASSWORD: "no"
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${POSTGRESQL_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_POSTGRESQL}

  haproxy:
    image: ${IMAGE_REGISTRY}$HAPROXY_IMAGE
    dns:
      - 127.0.0.11
    networks:
      - frontend
      - backend
    ports:
      - published: 30460
        target: 30460
        protocol: tcp
        mode: host
      - published: 50000
        target: 50000
        protocol: tcp
        mode: host
      - published: 50001
        target: 50001
        protocol: tcp
        mode: host
      - published: 50010
        target: 50010
        protocol: tcp
        mode: host
      - published: 3000
        target: 3000
        protocol: tcp
        mode: host
      - published: 8080
        target: 8080
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ${DATA_HAPROXY_DIR}
        target: /etc/haproxy/
        read_only: true
    deploy:
      mode: global
      resources:
        limits:
          memory: ${HAPROXY_RAM_LIMIT}
    command: haproxy -f /etc/haproxy/haproxy.cfg

  kafka-01:
    image: ${IMAGE_REGISTRY}$KAFKA_IMAGE
    user: root
    networks:
      - backend
    environment:
      BITNAMI_DEBUG: "true"
      # KRaft settings
      KAFKA_KRAFT_CLUSTER_ID: "ehB92ChxEe2iYQAAAkKsEg"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-01:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-01:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_MESSAGE_MAX_BYTES: 1048576
    volumes:
      - type: bind
        source: ${DATA_KAFKA_01_DIR}
        target: /bitnami/kafka
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${KAFKA_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == $PLACEMENT_KAFKA_01

  zero-01:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "zero-01"
    networks:
      - backend
    ports:
      - published: 5080
        target: 5080
        protocol: tcp
        mode: host
      - published: 6080
        target: 6080
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ${DATA_DGRAPH_ZERO_01_DIR}
        target: /dgraph
    deploy:
      replicas: 0
      resources:
        limits:
          memory: ${DGRAPH_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_DGRAPH_ZERO_01}
    command: dgraph zero --my=zero-01:5080 --replicas 1 --telemetry "reports=false; sentry=false;"

  alpha-01:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "alpha-01"
    networks:
      - backend
    volumes:
      - type: bind
        source: ${DATA_DGRAPH_ALPHA_01_DIR}
        target: /dgraph
    ports:
      - published: 8081
        target: 8080
        protocol: tcp
        mode: host
      - published: 9080
        target: 9080
        protocol: tcp
        mode: host
    deploy:
      replicas: 0
      resources:
        limits:
          memory: ${DGRAPH_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_DGRAPH_ALPHA_01}
    command: dgraph alpha --my=alpha-01:7080 --zero=zero-01:5080 --cache "size-mb=4096; percentage=50,30,20;" --security whitelist=0.0.0.0/0 --telemetry "reports=false; sentry=false;"

  ratel:
    image: ${IMAGE_REGISTRY}${RATEL_IMAGE}
    ports:
      - published: 8010
        target: 8000
        protocol: tcp
        mode: host
    networks:
      - backend
    deploy:
      replicas: 0
      resources:
        limits:
          memory: ${DGRAPH_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_RATEL}
    command: dgraph-ratel

  async-receiver:
    image: ${IMAGE_REGISTRY}${ASYNC_RECEIVER_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG"
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_CLIENT_ID: client-id-syncrx
    networks:
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_ASYNC_RECEIVER/csv
        target: /app/csv
        read_only: true
      - type: bind
        source: $DATA_DIR_ASYNC_RECEIVER/conf
        target: /app/conf
        read_only: true
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${ASYNC_RECEIVER_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_ASYNC_RECEIVER}

  etl:
    image: ${IMAGE_REGISTRY}${ETL_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG"
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID: app-id-etl
    networks:
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_ETL/conf
        target: /app/conf
        read_only: true
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${ETL_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_ETL}

  controller:
    image: ${IMAGE_REGISTRY}${CONTROLLER_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG"
      POSTGRESQL_IP: postgresql
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_NOTIFICATIONS_DB: ${POSTGRESQL_NOTIFICATIONS_DB}
      POSTGRESQL_AUDIT_DB: ${POSTGRESQL_AUDIT_DB}
      DGRAPH_HOSTS: ${DGRAPH_HOSTS}
      DGRAPH_PORTS: ${DGRAPH_PORTS}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID: app-id-ctrl
      KAFKA_CLIENT_ID: client-id-ctrl
      CONTROLLER_HTTP_PORT: 50000
      API_IP: api
      API_HTTP_PORT: 50000
      LINKER_IP: linker
      LINKER_HTTP_PORT: 50000
    networks:
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_CONTROLLER/conf
        target: /app/conf
        read_only: true
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${CONTROLLER_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_CONTROLLER}

  em-scala:
    image: ${IMAGE_REGISTRY}${EM_SCALA_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG"
      KAFKA_SERVERS: ${KAFKA_SERVERS}
    networks:
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_EM_SCALA/conf
        target: /app/conf
        read_only: true
      - type: bind
        source: $DATA_DIR_EM_SCALA/data
        target: /app/data
        read_only: true
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${EM_SCALA_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_EM_SCALA}

  linker:
    image: ${IMAGE_REGISTRY}${LINKER_IMAGE}
    environment:
      LOG4J2_LEVEL: "TRACE"
      POSTGRESQL_IP: postgresql
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_NOTIFICATIONS_DB: ${POSTGRESQL_NOTIFICATIONS_DB}
      POSTGRESQL_AUDIT_DB: ${POSTGRESQL_AUDIT_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID_INTERACTIONS: app-id-lnk1
      KAFKA_APPLICATION_ID_MU: app-id-lnk2
      KAFKA_CLIENT_ID_NOTIFICATIONS: client-id-lnk3
      DGRAPH_HOSTS: ${DGRAPH_HOSTS}
      DGRAPH_PORTS: ${DGRAPH_PORTS}
      LINKER_HTTP_PORT: 50000
      API_IP: api
      API_HTTP_PORT: 50000
      LINKER_MATCH_THRESHOLD: 0.65
      LINKER_MATCH_THRESHOLD_MARGIN: 0.1
    networks:
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_LINKER/conf
        target: /app/conf
        read_only: true
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${LINKER_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_LINKER}

  api:
    image: ${IMAGE_REGISTRY}${API_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG"
      POSTGRESQL_IP: postgresql
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_NOTIFICATIONS_DB: ${POSTGRESQL_NOTIFICATIONS_DB}
      POSTGRESQL_AUDIT_DB: ${POSTGRESQL_AUDIT_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID: app-id-api
      DGRAPH_HOSTS: ${DGRAPH_HOSTS}
      DGRAPH_PORTS: ${DGRAPH_PORTS}
      API_HTTP_PORT: ${API_HTTP_PORT}
      LINKER_IP: linker
      LINKER_HTTP_PORT: 50000
      CONTROLLER_IP: controller
      CONTROLLER_HTTP_PORT: ${CONTROLLER_HTTP_PORT}
      SYSTEM_CONFIG_DIR: ${SYSTEM_CONFIG_DIR}
      API_CONFIG_REFERENCE_FILENAME: ${API_CONFIG_REFERENCE_FILENAME}
      API_CONFIG_MASTER_FILENAME: ${API_CONFIG_MASTER_FILENAME}
      API_FIELDS_CONFIG_FILENAME: ${API_FIELDS_CONFIG_FILENAME}
      JEMPI_FILE_IMPORT_MAX_SIZE_BYTE: ${JEMPI_FILE_IMPORT_MAX_SIZE_BYTE}
    networks:
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_API/conf
        target: /app/conf
        read_only: false
      - type: bind
        source: $DATA_DIR_ASYNC_RECEIVER/csv
        target: /app/csv
        read_only: false
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${API_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_API}

  api-kc:
    image: ${IMAGE_REGISTRY}${API_KC_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG"
      KC_REALM_NAME: ${KC_REALM_NAME}
      KC_API_URL: ${KC_API_URL}
      KC_JEMPI_CLIENT_ID: ${KC_JEMPI_CLIENT_ID}
      KC_JEMPI_CLIENT_SECRET: ${KC_JEMPI_CLIENT_SECRET}
      KC_JEMPI_ROOT_URL: ${KC_JEMPI_ROOT_URL}
      KC_FRONTEND_URL: ${KC_FRONTEND_URL}
      JEMPI_SESSION_SECRET: ${JEMPI_SESSION_SECRET}
      JEMPI_SESSION_SECURE: "${JEMPI_SESSION_SECURE}"
      JEMPI_SESSION_DOMAIN_NAME: ${JEMPI_SESSION_DOMAIN_NAME}
      POSTGRESQL_IP: postgresql
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_USERS_DB: ${POSTGRESQL_USERS_DB}
      POSTGRESQL_NOTIFICATIONS_DB: ${POSTGRESQL_NOTIFICATIONS_DB}
      POSTGRESQL_AUDIT_DB: ${POSTGRESQL_AUDIT_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID: app-id-api
      DGRAPH_HOSTS: ${DGRAPH_HOSTS}
      DGRAPH_PORTS: ${DGRAPH_PORTS}
      API_KC_HTTP_PORT: ${API_KC_HTTP_PORT}
      LINKER_IP: linker
      LINKER_HTTP_PORT: ${LINKER_HTTP_PORT}
      CONTROLLER_IP: controller
      CONTROLLER_HTTP_PORT: ${CONTROLLER_HTTP_PORT}
      SYSTEM_CONFIG_DIR: ${SYSTEM_CONFIG_DIR}
      API_CONFIG_REFERENCE_FILENAME: ${API_CONFIG_REFERENCE_FILENAME}
      API_CONFIG_MASTER_FILENAME: ${API_CONFIG_MASTER_FILENAME}
      API_FIELDS_CONFIG_FILENAME: ${API_FIELDS_CONFIG_FILENAME}
      JEMPI_FILE_IMPORT_MAX_SIZE_BYTE: ${JEMPI_FILE_IMPORT_MAX_SIZE_BYTE}
    networks:
      - frontend
      - backend
    volumes:
      - type: bind
        source: $DATA_DIR_API_KC/conf
        target: /app/conf
        read_only: true
      - type: bind
        source: $DATA_DIR_ASYNC_RECEIVER/csv
        target: /app/csv
        read_only: false
      - type: bind
        source: $DATA_SYSTEM_CONFIG_DIR
        target: /app/conf_system
        read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${API_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_API_KC}

  keycloak-test-server:
    image: ${IMAGE_REGISTRY}$KEYCLOAK_IMAGE
    networks:
      - frontend
      - backend
    environment:
      KEYCLOAK_CREATE_ADMIN_USER: "true"
      KEYCLOAK_ADMIN_USER: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      DB_ADDR: postgresql
      DB_PORT: 5432
      DB_USER: ${POSTGRESQL_USERNAME}
      DB_PASSWORD: ${POSTGRESQL_PASSWORD}
      DB_DATABASE: ${POSTGRESQL_KC_TEST_DB}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "-f"
        - "http://localhost:8080"
      interval: "5s"
      timeout: "5s"
      retries: 36
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${KEYCLOAK_TEST_SERVER_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == $PLACEMENT_KEYCLOAK_TEST_SERVER

  bootstrapper:
    image: ${IMAGE_REGISTRY}$BOOTSTRAPPER_IMAGE
    networks:
      - backend
    volumes:
    - type: bind
      source: $DATA_SYSTEM_CONFIG_DIR
      target: /app/conf_system
      read_only: true  
    environment:
      POSTGRESQL_IP: postgresql
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_USERS_DB: ${POSTGRESQL_USERS_DB}
      POSTGRESQL_NOTIFICATIONS_DB: ${POSTGRESQL_NOTIFICATIONS_DB}
      POSTGRESQL_AUDIT_DB: ${POSTGRESQL_AUDIT_DB}
      POSTGRESQL_KC_TEST_DB: ${POSTGRESQL_KC_TEST_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID: app-id-bootstrapper
      DGRAPH_HOSTS: ${DGRAPH_HOSTS}
      DGRAPH_PORTS: ${DGRAPH_PORTS}
    deploy:
      mode: global

  backup-restore-api:
    image: ${IMAGE_REGISTRY}${BACKUP_RESTORE_API_IMAGE}
    environment:
      LOG4J2_LEVEL: "DEBUG" 
      POSTGRESQL_IP: postgresql
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_NOTIFICATIONS_DB: ${POSTGRESQL_NOTIFICATIONS_DB}
      POSTGRESQL_AUDIT_DB: ${POSTGRESQL_AUDIT_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS}
      KAFKA_APPLICATION_ID: app-id-backuprestoreapi
      DGRAPH_HOSTS: ${DGRAPH_HOSTS}
      DGRAPH_PORTS: ${DGRAPH_PORTS}
      BACKUP_RESTORE_API_HTTP_PORT: ${BACKUP_RESTORE_API_HTTP_PORT}
      API_HTTP_PORT: ${API_HTTP_PORT}
      LINKER_IP: linker
      LINKER_HTTP_PORT: 50000
      CONTROLLER_IP: controller
      CONTROLLER_HTTP_PORT: ${CONTROLLER_HTTP_PORT}
    networks:
    - backend
    volumes:
    - type: bind
      source: $DATA_SYSTEM_CONFIG_DIR
      target: /app/conf_system
      read_only: true
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${API_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_API}

  ui:
    image: ${IMAGE_REGISTRY}${UI_IMAGE}
    environment:
      REACT_APP_JEMPI_BASE_API_HOST: ${REACT_APP_JEMPI_BASE_API_HOST}
      REACT_APP_JEMPI_BASE_API_PORT: ${REACT_APP_JEMPI_BASE_API_PORT}
      REACT_APP_MOCK_BACKEND: "${REACT_APP_MOCK_BACKEND}"
      REACT_APP_ENABLE_SSO: "${REACT_APP_ENABLE_SSO}"
      REACT_APP_MAX_UPLOAD_CSV_SIZE_IN_MEGABYTES: ${REACT_APP_MAX_UPLOAD_CSV_SIZE_IN_MEGABYTES}
      NODE_ENV: ${NODE_ENV}
      KC_FRONTEND_URL: ${KC_FRONTEND_URL}
      KC_REALM_NAME: ${KC_REALM_NAME}
      KC_JEMPI_CLIENT_ID: ${KC_JEMPI_CLIENT_ID}
      REACT_APP_SHOW_BRAND_LOGO: "${REACT_APP_SHOW_BRAND_LOGO}"
    networks:
      - frontend
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${UI_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
          - node.labels.name == ${PLACEMENT_UI}
