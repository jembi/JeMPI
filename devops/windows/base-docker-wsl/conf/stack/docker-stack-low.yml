version: '3.8'

networks:
  backend:
    name: backend
    driver: overlay
    attachable: true
  frontend:
    name: frontend
    driver: overlay
    attachable: true

services:

  postgresql:
    image: ${IMAGE_REGISTRY}${POSTGRESQL_IMAGE}
    networks:
    - backend
    ports:
    - published: 5432
      target: 5432
      protocol: tcp
      mode: host
    volumes:
      - ${DATA_POSTGRESQL_DB_DIR}:/bitnami/postgresql'
    environment:
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      ALLOW_EMPTY_PASSWORD: "no"
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${POSTGRESQL_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_POSTGRESQL}

  # keycloak-test-server:
  #   image: ${IMAGE_REGISTRY}$KEYCLOAK_IMAGE
  #   user: root
  #   networks:
  #     - frontend
  #     - backend
  #   volumes:
  #   - type: bind
  #     source: ${DATA_KEYCLOAK_TEST_SERVER_DIR}
  #     target: /docker-entrypoint-initdb.d
  #     read_only: true
  #   environment:
  #     KEYCLOAK_CREATE_ADMIN_USER: "true"
  #     KEYCLOAK_ADMIN_USER: "admin"
  #     KEYCLOAK_ADMIN_PASSWORD: "admin"
  #     DB_ADDR: postgresql
  #     DB_PORT: 5432
  #     DB_DATABASE: ${POSTGRESQL_DATABASE}
  #     DB_USER: ${POSTGRESQL_USERNAME}
  #     DB_PASSWORD: ${POSTGRESQL_PASSWORD}
  #   deploy:
  #     mode: replicated
  #     replicas: 0
  #     resources:
  #       limits:
  #         memory: ${KEYCLOAK_TEST_SERVER_RAM_LIMIT}
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints:
  #         - node.labels.name == $PLACEMENT_KEYCLOAK_TEST_SERVER

  # nginx:
  #   image: ${IMAGE_REGISTRY}$NGINX_IMAGE
  #   networks:
  #     - frontend
  #   deploy:
  #     mode: replicated
  #     replicas: 0
  #     resources:
  #       limits:
  #         memory: ${NGINX_RAM_LIMIT}
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints:
  #         - node.labels.name == $PLACEMENT_NGINX

#  haproxy:
#    image: ${IMAGE_REGISTRY}$HAPROXY_IMAGE
#    dns:
#      - 127.0.0.11
#    networks:
#      - frontend
#      - backend
#    ports:
#      - published: 30460
#        target: 30460
#        protocol: tcp
#        mode: host
#      - published: 50000
#        target: 50000
#        protocol: tcp
#        mode: host
#      - published: 3000
#        target: 3000
#        protocol: tcp
#        mode: host
#    volumes:
#      - type: bind
#        source: ${DATA_HAPROXY_DIR}
#        target: /etc/haproxy/
#        read_only: true
#    deploy:
#      mode: global
#      resources:
#        limits:
#          memory: ${HAPROXY_RAM_LIMIT}
      
  kafka-01:
    image: ${IMAGE_REGISTRY}$KAFKA_IMAGE
    user: root
    networks:
      - backend
    ports:
    - published: 9094
      target: 9094
      protocol: tcp
      mode: host      
    environment:
      BITNAMI_DEBUG: 'true'
    # KRaft settings
      KAFKA_KRAFT_CLUSTER_ID: 'ehB92ChxEe2iYQAAAkKsEg'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-01:9093
    # Listeners
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka-01:9092,EXTERNAL://${PLACEMENT_KAFKA_01_IP}:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_BROKER_ID: 1
    volumes:
      - type: bind
        source: ${DATA_KAFKA_01_DIR}
        target: /bitnami/kafka
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: ${KAFKA_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == $PLACEMENT_KAFKA_01
  
  zero-01:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "zero-01"
    networks:
    - backend
    ports:
    - published: 5080
      target: 5080
      protocol: tcp
      mode: host
    - published: 6080
      target: 6080
      protocol: tcp
      mode: host
    volumes:
    - type: bind
      source: ${DATA_DGRAPH_ZERO_01_DIR}
      target: /dgraph
    deploy:
      replicas: 0
      resources:
        limits:
          memory: ${DGRAPH_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_DGRAPH_ZERO_01}
    command: dgraph zero --my=zero-01:5080 --replicas 1 --telemetry "reports=false; sentry=false;"

  alpha-01:
    image: ${IMAGE_REGISTRY}${DGRAPH_IMAGE}
    hostname: "alpha-01"
    networks:
    - backend
    volumes:
    - type: bind
      source: ${DATA_DGRAPH_ALPHA_01_DIR}
      target: /dgraph
    ports:
    - published: 8081
      target: 8080
      protocol: tcp
      mode: host
    - published: 9080
      target: 9080
      protocol: tcp
      mode: host
    deploy:
      replicas: 0
      resources:
        limits:
          memory: ${DGRAPH_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_DGRAPH_ALPHA_01}
    command: dgraph alpha --my=alpha-01:7080 --zero=zero-01:5080 --security whitelist=0.0.0.0/0 --telemetry "reports=false; sentry=false;"

  ratel:
    image: ${IMAGE_REGISTRY}${RATEL_IMAGE}
    ports:
    - published: 8010
      target: 8000
      protocol: tcp
      mode: host                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
    networks:
    - backend
    deploy:
      replicas: 0
      resources:
        limits:
          memory: ${DGRAPH_RAM_LIMIT}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == ${PLACEMENT_RATEL}
    command: dgraph-ratel


volumes:
  ${DATA_POSTGRESQL_DB_DIR}:
    driver: local
